{"version":3,"sources":["navigation.js","skip-link-focus-fix.js","material.js","ripples.js","navgoco.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjntfile":"theme.js","sourcesContent":["/**\r\n * File navigation.js.\r\n *\r\n * Handles toggling the navigation menu for small screens and enables tab\r\n * support for dropdown menus.\r\n */\r\n(function () {\r\n    var container, button, menu, links, subMenus, i, len;\r\n\r\n    container = document.getElementById('site-navigation');\r\n    if (!container) {\r\n        return;\r\n    }\r\n\r\n    button = container.getElementsByTagName('button')[0];\r\n    if ('undefined' === typeof button) {\r\n        return;\r\n    }\r\n\r\n    menu = container.getElementsByTagName('ul')[0];\r\n\r\n    // Hide menu toggle button if menu is empty and return early.\r\n    if ('undefined' === typeof menu) {\r\n        button.style.display = 'none';\r\n        return;\r\n    }\r\n\r\n    menu.setAttribute('aria-expanded', 'false');\r\n    if (-1 === menu.className.indexOf('nav-menu')) {\r\n        menu.className += ' nav-menu';\r\n    }\r\n\r\n    button.onclick = function () {\r\n        if (-1 !== container.className.indexOf('toggled')) {\r\n            container.className = container.className.replace(' toggled', '');\r\n            button.setAttribute('aria-expanded', 'false');\r\n            menu.setAttribute('aria-expanded', 'false');\r\n        } else {\r\n            container.className += ' toggled';\r\n            button.setAttribute('aria-expanded', 'true');\r\n            menu.setAttribute('aria-expanded', 'true');\r\n        }\r\n    };\r\n\r\n    // Get all the link elements within the menu.\r\n    links = menu.getElementsByTagName('a');\r\n    subMenus = menu.getElementsByTagName('ul');\r\n\r\n    // Set menu items with submenus to aria-haspopup=\"true\".\r\n    for (i = 0, len = subMenus.length; i < len; i++) {\r\n        subMenus[i].parentNode.setAttribute('aria-haspopup', 'true');\r\n    }\r\n\r\n    // Each time a menu link is focused or blurred, toggle focus.\r\n    for (i = 0, len = links.length; i < len; i++) {\r\n        links[i].addEventListener('focus', toggleFocus, true);\r\n        links[i].addEventListener('blur', toggleFocus, true);\r\n    }\r\n\r\n    /**\r\n     * Sets or removes .focus class on an element.\r\n     */\r\n    function toggleFocus() {\r\n        var self = this;\r\n\r\n        // Move up through the ancestors of the current link until we hit .nav-menu.\r\n        while (-1 === self.className.indexOf('nav-menu')) {\r\n\r\n            // On li elements toggle the class .focus.\r\n            if ('li' === self.tagName.toLowerCase()) {\r\n                if (-1 !== self.className.indexOf('focus')) {\r\n                    self.className = self.className.replace(' focus', '');\r\n                } else {\r\n                    self.className += ' focus';\r\n                }\r\n            }\r\n\r\n            self = self.parentElement;\r\n        }\r\n    }\r\n})();\r\n","/**\r\n * File skip-link-focus-fix.js.\r\n *\r\n * Helps with accessibility for keyboard only users.\r\n *\r\n * Learn more: https://git.io/vWdr2\r\n */\r\n(function () {\r\n    var isWebkit = navigator.userAgent.toLowerCase().indexOf('webkit') > -1,\r\n        isOpera = navigator.userAgent.toLowerCase().indexOf('opera') > -1,\r\n        isIe = navigator.userAgent.toLowerCase().indexOf('msie') > -1;\r\n\r\n    if (( isWebkit || isOpera || isIe ) && document.getElementById && window.addEventListener) {\r\n        window.addEventListener('hashchange', function () {\r\n            var id = location.hash.substring(1),\r\n                element;\r\n\r\n            if (!( /^[A-z0-9_-]+$/.test(id) )) {\r\n                return;\r\n            }\r\n\r\n            element = document.getElementById(id);\r\n\r\n            if (element) {\r\n                if (!( /^(?:a|select|input|button|textarea)$/i.test(element.tagName) )) {\r\n                    element.tabIndex = -1;\r\n                }\r\n\r\n                element.focus();\r\n            }\r\n        }, false);\r\n    }\r\n})();\r\n","/* globals jQuery */\n\n(function ($) {\n    // Selector to select only not already processed elements\n    $.expr[\":\"].notmdproc = function (obj) {\n        if ($(obj).data(\"mdproc\")) {\n            return false;\n        } else {\n            return true;\n        }\n    };\n\n    function _isChar(evt) {\n        if (typeof evt.which == \"undefined\") {\n            return true;\n        } else if (typeof evt.which == \"number\" && evt.which > 0) {\n            return (\n                !evt.ctrlKey\n                && !evt.metaKey\n                && !evt.altKey\n                && evt.which != 8  // backspace\n                && evt.which != 9  // tab\n                && evt.which != 13 // enter\n                && evt.which != 16 // shift\n                && evt.which != 17 // ctrl\n                && evt.which != 20 // caps lock\n                && evt.which != 27 // escape\n            );\n        }\n        return false;\n    }\n\n    function _addFormGroupFocus(element) {\n        var $element = $(element);\n        if (!$element.prop('disabled')) {  // this is showing as undefined on chrome but works fine on firefox??\n            $element.closest(\".form-group\").addClass(\"is-focused\");\n        }\n    }\n\n    function _toggleTypeFocus($input) {\n        $input.closest('label').hover(function () {\n            var $i = $(this).find('input');\n            if (!$i.prop('disabled')) { // hack because the _addFormGroupFocus() wasn't identifying the property on chrome\n                _addFormGroupFocus($i);     // need to find the input so we can check disablement\n            }\n        }, function () {\n            _removeFormGroupFocus($(this).find('input'));\n        });\n    }\n\n    function _removeFormGroupFocus(element) {\n        $(element).closest(\".form-group\").removeClass(\"is-focused\"); // remove class from form-group\n    }\n\n    $.material = {\n        \"options\": {\n            // These options set what will be started by $.material.init()\n            \"validate\": true,\n            \"input\": true,\n            \"ripples\": true,\n            \"checkbox\": true,\n            \"togglebutton\": true,\n            \"radio\": true,\n            \"arrive\": true,\n            \"autofill\": false,\n\n            \"withRipples\": [\n                \".btn:not(.btn-link)\",\n                \".card-image\",\n                \".navbar a:not(.withoutripple)\",\n                \".dropdown-menu a\",\n                \".nav-tabs a:not(.withoutripple)\",\n                \".withripple\",\n                \".pagination li:not(.active):not(.disabled) a:not(.withoutripple)\"\n            ].join(\",\"),\n            \"inputElements\": \"input.form-control, textarea.form-control, select.form-control\",\n            \"checkboxElements\": \".checkbox > label > input[type=checkbox]\",\n            \"togglebuttonElements\": \".togglebutton > label > input[type=checkbox]\",\n            \"radioElements\": \".radio > label > input[type=radio]\"\n        },\n        \"checkbox\": function (selector) {\n            // Add fake-checkbox to material checkboxes\n            var $input = $((selector) ? selector : this.options.checkboxElements)\n                .filter(\":notmdproc\")\n                .data(\"mdproc\", true)\n                .after(\"<span class='checkbox-material'><span class='check'></span></span>\");\n\n            _toggleTypeFocus($input);\n        },\n        \"togglebutton\": function (selector) {\n            // Add fake-checkbox to material checkboxes\n            var $input = $((selector) ? selector : this.options.togglebuttonElements)\n                .filter(\":notmdproc\")\n                .data(\"mdproc\", true)\n                .after(\"<span class='toggle'></span>\");\n\n            _toggleTypeFocus($input);\n        },\n        \"radio\": function (selector) {\n            // Add fake-radio to material radios\n            var $input = $((selector) ? selector : this.options.radioElements)\n                .filter(\":notmdproc\")\n                .data(\"mdproc\", true)\n                .after(\"<span class='circle'></span><span class='check'></span>\");\n\n            _toggleTypeFocus($input);\n        },\n        \"input\": function (selector) {\n            $((selector) ? selector : this.options.inputElements)\n                .filter(\":notmdproc\")\n                .data(\"mdproc\", true)\n                .each(function () {\n                    var $input = $(this);\n\n                    // Requires form-group standard markup (will add it if necessary)\n                    var $formGroup = $input.closest(\".form-group\"); // note that form-group may be grandparent in the case of an input-group\n                    if ($formGroup.length === 0) {\n                        $input.wrap(\"<div class='form-group'></div>\");\n                        $formGroup = $input.closest(\".form-group\"); // find node after attached (otherwise additional attachments don't work)\n                    }\n\n                    // Legacy - Add hint label if using the old shorthand data-hint attribute on the input\n                    if ($input.attr(\"data-hint\")) {\n                        $input.after(\"<p class='help-block'>\" + $input.attr(\"data-hint\") + \"</p>\");\n                        $input.removeAttr(\"data-hint\");\n                    }\n\n                    // Legacy - Change input-sm/lg to form-group-sm/lg instead (preferred standard and simpler css/less variants)\n                    var legacySizes = {\n                        \"input-lg\": \"form-group-lg\",\n                        \"input-sm\": \"form-group-sm\"\n                    };\n                    $.each(legacySizes, function (legacySize, standardSize) {\n                        if ($input.hasClass(legacySize)) {\n                            $input.removeClass(legacySize);\n                            $formGroup.addClass(standardSize);\n                        }\n                    });\n\n                    // Legacy - Add label-floating if using old shorthand <input class=\"floating-label\" placeholder=\"foo\">\n                    if ($input.hasClass(\"floating-label\")) {\n                        var placeholder = $input.attr(\"placeholder\");\n                        $input.attr(\"placeholder\", null).removeClass(\"floating-label\");\n                        var id = $input.attr(\"id\");\n                        var forAttribute = \"\";\n                        if (id) {\n                            forAttribute = \"for='\" + id + \"'\";\n                        }\n                        $formGroup.addClass(\"label-floating\");\n                        $input.after(\"<label \" + forAttribute + \"class='control-label'>\" + placeholder + \"</label>\");\n                    }\n\n                    // Set as empty if is empty (damn I must improve this...)\n                    if ($input.val() === null || $input.val() == \"undefined\" || $input.val() === \"\") {\n                        $formGroup.addClass(\"is-empty\");\n                    }\n\n                    // Add at the end of the form-group\n                    $formGroup.append(\"<span class='material-input'></span>\");\n\n                    // Support for file input\n                    if ($formGroup.find(\"input[type=file]\").length > 0) {\n                        $formGroup.addClass(\"is-fileinput\");\n                    }\n                });\n        },\n        \"attachInputEventHandlers\": function () {\n            var validate = this.options.validate;\n\n            $(document)\n                .on(\"change\", \".checkbox input[type=checkbox]\", function () {\n                    $(this).blur();\n                })\n                .on(\"keydown paste\", \".form-control\", function (e) {\n                    if (_isChar(e)) {\n                        $(this).closest(\".form-group\").removeClass(\"is-empty\");\n                    }\n                })\n                .on(\"keyup change\", \".form-control\", function () {\n                    var $input = $(this);\n                    var $formGroup = $input.closest(\".form-group\");\n                    var isValid = (typeof $input[0].checkValidity === \"undefined\" || $input[0].checkValidity());\n\n                    if ($input.val() === \"\") {\n                        $formGroup.addClass(\"is-empty\");\n                    }\n                    else {\n                        $formGroup.removeClass(\"is-empty\");\n                    }\n\n                    // Validation events do not bubble, so they must be attached directly to the input: http://jsfiddle.net/PEpRM/1/\n                    //  Further, even the bind method is being caught, but since we are already calling #checkValidity here, just alter\n                    //  the form-group on change.\n                    //\n                    // NOTE: I'm not sure we should be intervening regarding validation, this seems better as a README and snippet of code.\n                    //        BUT, I've left it here for backwards compatibility.\n                    if (validate) {\n                        if (isValid) {\n                            $formGroup.removeClass(\"has-error\");\n                        }\n                        else {\n                            $formGroup.addClass(\"has-error\");\n                        }\n                    }\n                })\n                .on(\"focus\", \".form-control, .form-group.is-fileinput\", function () {\n                    _addFormGroupFocus(this);\n                })\n                .on(\"blur\", \".form-control, .form-group.is-fileinput\", function () {\n                    _removeFormGroupFocus(this);\n                })\n                // make sure empty is added back when there is a programmatic value change.\n                //  NOTE: programmatic changing of value using $.val() must trigger the change event i.e. $.val('x').trigger('change')\n                .on(\"change\", \".form-group input\", function () {\n                    var $input = $(this);\n                    if ($input.attr(\"type\") == \"file\") {\n                        return;\n                    }\n\n                    var $formGroup = $input.closest(\".form-group\");\n                    var value = $input.val();\n                    if (value) {\n                        $formGroup.removeClass(\"is-empty\");\n                    } else {\n                        $formGroup.addClass(\"is-empty\");\n                    }\n                })\n                // set the fileinput readonly field with the name of the file\n                .on(\"change\", \".form-group.is-fileinput input[type='file']\", function () {\n                    var $input = $(this);\n                    var $formGroup = $input.closest(\".form-group\");\n                    var value = \"\";\n                    $.each(this.files, function (i, file) {\n                        value += file.name + \", \";\n                    });\n                    value = value.substring(0, value.length - 2);\n                    if (value) {\n                        $formGroup.removeClass(\"is-empty\");\n                    } else {\n                        $formGroup.addClass(\"is-empty\");\n                    }\n                    $formGroup.find(\"input.form-control[readonly]\").val(value);\n                });\n        },\n        \"ripples\": function (selector) {\n            $((selector) ? selector : this.options.withRipples).ripples();\n        },\n        \"autofill\": function () {\n            // This part of code will detect autofill when the page is loading (username and password inputs for example)\n            var loading = setInterval(function () {\n                $(\"input[type!=checkbox]\").each(function () {\n                    var $this = $(this);\n                    if ($this.val() && $this.val() !== $this.attr(\"value\")) {\n                        $this.trigger(\"change\");\n                    }\n                });\n            }, 100);\n\n            // After 10 seconds we are quite sure all the needed inputs are autofilled then we can stop checking them\n            setTimeout(function () {\n                clearInterval(loading);\n            }, 10000);\n        },\n        \"attachAutofillEventHandlers\": function () {\n            // Listen on inputs of the focused form (because user can select from the autofill dropdown only when the input has focus)\n            var focused;\n            $(document)\n                .on(\"focus\", \"input\", function () {\n                    var $inputs = $(this).parents(\"form\").find(\"input\").not(\"[type=file]\");\n                    focused = setInterval(function () {\n                        $inputs.each(function () {\n                            var $this = $(this);\n                            if ($this.val() !== $this.attr(\"value\")) {\n                                $this.trigger(\"change\");\n                            }\n                        });\n                    }, 100);\n                })\n                .on(\"blur\", \".form-group input\", function () {\n                    clearInterval(focused);\n                });\n        },\n        \"init\": function (options) {\n            this.options = $.extend({}, this.options, options);\n            var $document = $(document);\n\n            if ($.fn.ripples && this.options.ripples) {\n                this.ripples();\n            }\n            if (this.options.input) {\n                this.input();\n                this.attachInputEventHandlers();\n            }\n            if (this.options.checkbox) {\n                this.checkbox();\n            }\n            if (this.options.togglebutton) {\n                this.togglebutton();\n            }\n            if (this.options.radio) {\n                this.radio();\n            }\n            if (this.options.autofill) {\n                this.autofill();\n                this.attachAutofillEventHandlers();\n            }\n\n            if (document.arrive && this.options.arrive) {\n                if ($.fn.ripples && this.options.ripples) {\n                    $document.arrive(this.options.withRipples, function () {\n                        $.material.ripples($(this));\n                    });\n                }\n                if (this.options.input) {\n                    $document.arrive(this.options.inputElements, function () {\n                        $.material.input($(this));\n                    });\n                }\n                if (this.options.checkbox) {\n                    $document.arrive(this.options.checkboxElements, function () {\n                        $.material.checkbox($(this));\n                    });\n                }\n                if (this.options.radio) {\n                    $document.arrive(this.options.radioElements, function () {\n                        $.material.radio($(this));\n                    });\n                }\n                if (this.options.togglebutton) {\n                    $document.arrive(this.options.togglebuttonElements, function () {\n                        $.material.togglebutton($(this));\n                    });\n                }\n\n            }\n        }\n    };\n\n})(jQuery);\n","/* Copyright 2014+, Federico Zivolo, LICENSE at https://github.com/FezVrasta/bootstrap-material-design/blob/master/LICENSE.md */\n/* globals jQuery, navigator */\n\n(function ($, window, document, undefined) {\n\n    \"use strict\";\n\n    /**\n     * Define the name of the plugin\n     */\n    var ripples = \"ripples\";\n\n\n    /**\n     * Get an instance of the plugin\n     */\n    var self = null;\n\n\n    /**\n     * Define the defaults of the plugin\n     */\n    var defaults = {};\n\n\n    /**\n     * Create the main plugin function\n     */\n    function Ripples(element, options) {\n        self = this;\n\n        this.element = $(element);\n\n        this.options = $.extend({}, defaults, options);\n\n        this._defaults = defaults;\n        this._name = ripples;\n\n        this.init();\n    }\n\n\n    /**\n     * Initialize the plugin\n     */\n    Ripples.prototype.init = function () {\n        var $element = this.element;\n\n        $element.on(\"mousedown touchstart\", function (event) {\n            /**\n             * Verify if the user is just touching on a device and return if so\n             */\n            if (self.isTouch() && event.type === \"mousedown\") {\n                return;\n            }\n\n\n            /**\n             * Verify if the current element already has a ripple wrapper element and\n             * creates if it doesn't\n             */\n            if (!($element.find(\".ripple-container\").length)) {\n                $element.append(\"<div class=\\\"ripple-container\\\"></div>\");\n            }\n\n\n            /**\n             * Find the ripple wrapper\n             */\n            var $wrapper = $element.children(\".ripple-container\");\n\n\n            /**\n             * Get relY and relX positions\n             */\n            var relY = self.getRelY($wrapper, event);\n            var relX = self.getRelX($wrapper, event);\n\n\n            /**\n             * If relY and/or relX are false, return the event\n             */\n            if (!relY && !relX) {\n                return;\n            }\n\n\n            /**\n             * Get the ripple color\n             */\n            var rippleColor = self.getRipplesColor($element);\n\n\n            /**\n             * Create the ripple element\n             */\n            var $ripple = $(\"<div></div>\");\n\n            $ripple\n                .addClass(\"ripple\")\n                .css({\n                    \"left\": relX,\n                    \"top\": relY,\n                    \"background-color\": rippleColor\n                });\n\n\n            /**\n             * Append the ripple to the wrapper\n             */\n            $wrapper.append($ripple);\n\n\n            /**\n             * Make sure the ripple has the styles applied (ugly hack but it works)\n             */\n            (function () {\n                return window.getComputedStyle($ripple[0]).opacity;\n            })();\n\n\n            /**\n             * Turn on the ripple animation\n             */\n            self.rippleOn($element, $ripple);\n\n\n            /**\n             * Call the rippleEnd function when the transition \"on\" ends\n             */\n            setTimeout(function () {\n                self.rippleEnd($ripple);\n            }, 500);\n\n\n            /**\n             * Detect when the user leaves the element\n             */\n            $element.on(\"mouseup mouseleave touchend\", function () {\n                $ripple.data(\"mousedown\", \"off\");\n\n                if ($ripple.data(\"animating\") === \"off\") {\n                    self.rippleOut($ripple);\n                }\n            });\n\n        });\n    };\n\n\n    /**\n     * Get the new size based on the element height/width and the ripple width\n     */\n    Ripples.prototype.getNewSize = function ($element, $ripple) {\n\n        return (Math.max($element.outerWidth(), $element.outerHeight()) / $ripple.outerWidth()) * 2.5;\n    };\n\n\n    /**\n     * Get the relX\n     */\n    Ripples.prototype.getRelX = function ($wrapper, event) {\n        var wrapperOffset = $wrapper.offset();\n\n        if (!self.isTouch()) {\n            /**\n             * Get the mouse position relative to the ripple wrapper\n             */\n            return event.pageX - wrapperOffset.left;\n        } else {\n            /**\n             * Make sure the user is using only one finger and then get the touch\n             * position relative to the ripple wrapper\n             */\n            event = event.originalEvent;\n\n            if (event.touches.length === 1) {\n                return event.touches[0].pageX - wrapperOffset.left;\n            }\n\n            return false;\n        }\n    };\n\n\n    /**\n     * Get the relY\n     */\n    Ripples.prototype.getRelY = function ($wrapper, event) {\n        var wrapperOffset = $wrapper.offset();\n\n        if (!self.isTouch()) {\n            /**\n             * Get the mouse position relative to the ripple wrapper\n             */\n            return event.pageY - wrapperOffset.top;\n        } else {\n            /**\n             * Make sure the user is using only one finger and then get the touch\n             * position relative to the ripple wrapper\n             */\n            event = event.originalEvent;\n\n            if (event.touches.length === 1) {\n                return event.touches[0].pageY - wrapperOffset.top;\n            }\n\n            return false;\n        }\n    };\n\n\n    /**\n     * Get the ripple color\n     */\n    Ripples.prototype.getRipplesColor = function ($element) {\n\n        var color = $element.data(\"ripple-color\") ? $element.data(\"ripple-color\") : window.getComputedStyle($element[0]).color;\n\n        return color;\n    };\n\n\n    /**\n     * Verify if the client browser has transistion support\n     */\n    Ripples.prototype.hasTransitionSupport = function () {\n        var thisBody = document.body || document.documentElement;\n        var thisStyle = thisBody.style;\n\n        var support = (\n            thisStyle.transition !== undefined ||\n            thisStyle.WebkitTransition !== undefined ||\n            thisStyle.MozTransition !== undefined ||\n            thisStyle.MsTransition !== undefined ||\n            thisStyle.OTransition !== undefined\n        );\n\n        return support;\n    };\n\n\n    /**\n     * Verify if the client is using a mobile device\n     */\n    Ripples.prototype.isTouch = function () {\n        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    };\n\n\n    /**\n     * End the animation of the ripple\n     */\n    Ripples.prototype.rippleEnd = function ($ripple) {\n        $ripple.data(\"animating\", \"off\");\n\n        if ($ripple.data(\"mousedown\") === \"off\") {\n            self.rippleOut($ripple);\n        }\n    };\n\n\n    /**\n     * Turn off the ripple effect\n     */\n    Ripples.prototype.rippleOut = function ($ripple) {\n        $ripple.off();\n\n        if (self.hasTransitionSupport()) {\n            $ripple.addClass(\"ripple-out\");\n        } else {\n            $ripple.animate({\"opacity\": 0}, 100, function () {\n                $ripple.trigger(\"transitionend\");\n            });\n        }\n\n        $ripple.on(\"transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd\", function () {\n            $ripple.remove();\n        });\n    };\n\n\n    /**\n     * Turn on the ripple effect\n     */\n    Ripples.prototype.rippleOn = function ($element, $ripple) {\n        var size = self.getNewSize($element, $ripple);\n\n        if (self.hasTransitionSupport()) {\n            $ripple\n                .css({\n                    \"-ms-transform\": \"scale(\" + size + \")\",\n                    \"-moz-transform\": \"scale(\" + size + \")\",\n                    \"-webkit-transform\": \"scale(\" + size + \")\",\n                    \"transform\": \"scale(\" + size + \")\"\n                })\n                .addClass(\"ripple-on\")\n                .data(\"animating\", \"on\")\n                .data(\"mousedown\", \"on\");\n        } else {\n            $ripple.animate({\n                \"width\": Math.max($element.outerWidth(), $element.outerHeight()) * 2,\n                \"height\": Math.max($element.outerWidth(), $element.outerHeight()) * 2,\n                \"margin-left\": Math.max($element.outerWidth(), $element.outerHeight()) * (-1),\n                \"margin-top\": Math.max($element.outerWidth(), $element.outerHeight()) * (-1),\n                \"opacity\": 0.2\n            }, 500, function () {\n                $ripple.trigger(\"transitionend\");\n            });\n        }\n    };\n\n\n    /**\n     * Create the jquery plugin function\n     */\n    $.fn.ripples = function (options) {\n        return this.each(function () {\n            if (!$.data(this, \"plugin_\" + ripples)) {\n                $.data(this, \"plugin_\" + ripples, new Ripples(this, options));\n            }\n        });\n    };\n\n})(jQuery, window, document);\n","/*\n * jQuery Navgoco Menus Plugin v0.1.5 (2013-09-07)\n * https://github.com/tefra/navgoco\n *\n * Copyright (c) 2013 Chris T (@tefra)\n * BSD - https://github.com/tefra/navgoco/blob/master/LICENSE-BSD\n */\n(function ($) {\n\n    \"use strict\";\n\n    /**\n     * Plugin Constructor. Every menu must have a unique id which will either\n     * be the actual id attribute or its index in the page.\n     *\n     * @param {Element} el\n     * @param {Object} options\n     * @param {Integer} idx\n     * @returns {Object} Plugin Instance\n     */\n    var Plugin = function (el, options, idx) {\n        this.el = el;\n        this.$el = $(el);\n        this.options = options;\n        this.uuid = this.$el.attr('id') ? this.$el.attr('id') : idx;\n        this.state = {};\n        this.init();\n        return this;\n    };\n\n    /**\n     * Plugin methods\n     */\n    Plugin.prototype = {\n        /**\n         * Load cookie, assign a unique data-index attribute to\n         * all sub-menus and show|hide them according to cookie\n         * or based on the parent open class. Find all parent li > a\n         * links add the carent if it's on and attach the event click\n         * to them.\n         */\n        init: function () {\n            var self = this;\n            self._load();\n            self.$el.find('ul').each(function (idx) {\n                var sub = $(this);\n                sub.attr('data-index', idx);\n                if (self.options.save && self.state.hasOwnProperty(idx)) {\n                    sub.parent().addClass(self.options.openClass);\n                    sub.show();\n                } else if (sub.parent().hasClass(self.options.openClass)) {\n                    sub.show();\n                    self.state[idx] = 1;\n                } else {\n                    sub.hide();\n                }\n            });\n\n            if (self.options.caret) {\n                self.$el.find(\"li:has(ul) > a\").append(self.options.caret);\n            }\n\n            var links = self.$el.find(\"li > a\");\n            links.on('click', function (event) {\n                event.stopPropagation();\n                var sub = $(this).next();\n                sub = sub.length > 0 ? sub : false;\n                self.options.onClickBefore.call(this, event, sub);\n                if (sub) {\n                    event.preventDefault();\n                    self._toggle(sub, sub.is(\":hidden\"));\n                    self._save();\n                } else {\n                    if (self.options.accordion) {\n                        var allowed = self.state = self._parents($(this));\n                        self.$el.find('ul').filter(':visible').each(function () {\n                            var sub = $(this),\n                                idx = sub.attr('data-index');\n\n                            if (!allowed.hasOwnProperty(idx)) {\n                                self._toggle(sub, false);\n                            }\n                        });\n                        self._save();\n                    }\n                }\n                self.options.onClickAfter.call(this, event, sub);\n            });\n        },\n        /**\n         * Accepts a JQuery Element and a boolean flag. If flag is false it removes the `open` css\n         * class from the parent li and slides up the sub-menu. If flag is open it adds the `open`\n         * css class to the parent li and slides down the menu. If accordion mode is on all\n         * sub-menus except the direct parent tree will close. Internally an object with the menus\n         * states is maintained for later save duty.\n         *\n         * @param {Element} sub\n         * @param {Boolean} open\n         */\n        _toggle: function (sub, open) {\n            var self = this,\n                idx = sub.attr('data-index'),\n                parent = sub.parent();\n\n            self.options.onToggleBefore.call(this, sub, open);\n            if (open) {\n                parent.addClass(self.options.openClass);\n                sub.slideDown(self.options.slide);\n                self.state[idx] = 1;\n\n                if (self.options.accordion) {\n                    var allowed = self.state = self._parents(sub);\n                    allowed[idx] = self.state[idx] = 1;\n\n                    self.$el.find('ul').filter(':visible').each(function () {\n                        var sub = $(this),\n                            idx = sub.attr('data-index');\n\n                        if (!allowed.hasOwnProperty(idx)) {\n                            self._toggle(sub, false);\n                        }\n                    });\n                }\n            } else {\n                parent.removeClass(self.options.openClass);\n                sub.slideUp(self.options.slide);\n                self.state[idx] = 0;\n            }\n            self.options.onToggleAfter.call(this, sub, open);\n        },\n        /**\n         * Returns all parents of a sub-menu. When obj is true It returns an object with indexes for\n         * keys and the elements as values, if obj is false the object is filled with the value `1`.\n         *\n         * @since v0.1.2\n         * @param {Element} sub\n         * @param {Boolean} obj\n         * @returns {Object}\n         */\n        _parents: function (sub, obj) {\n            var result = {},\n                parent = sub.parent(),\n                parents = parent.parents('ul');\n\n            parents.each(function () {\n                var par = $(this),\n                    idx = par.attr('data-index');\n\n                if (!idx) {\n                    return false;\n                }\n                result[idx] = obj ? par : 1;\n            });\n            return result;\n        },\n        /**\n         * If `save` option is on the internal object that keeps track of the sub-menus states is\n         * saved with a cookie. For size reasons only the open sub-menus indexes are stored.         *\n         */\n        _save: function () {\n            if (this.options.save) {\n                var save = {};\n                for (var key in this.state) {\n                    if (this.state[key] === 1) {\n                        save[key] = 1;\n                    }\n                }\n                cookie[this.uuid] = this.state = save;\n                $.cookie(this.options.cookie.name, JSON.stringify(cookie), this.options.cookie);\n            }\n        },\n        /**\n         * If `save` option is on it reads the cookie data. The cookie contains data for all\n         * navgoco menus so the read happens only once and stored in the global `cookie` var.\n         */\n        _load: function () {\n            if (this.options.save) {\n                if (cookie === null) {\n                    var data = $.cookie(this.options.cookie.name);\n                    cookie = (data) ? JSON.parse(data) : {};\n                }\n                this.state = cookie.hasOwnProperty(this.uuid) ? cookie[this.uuid] : {};\n            }\n        },\n        /**\n         * Public method toggle to manually show|hide sub-menus. If no indexes are provided all\n         * items will be toggled. You can pass sub-menus indexes as regular params. eg:\n         * navgoco('toggle', true, 1, 2, 3, 4, 5);\n         *\n         * Since v0.1.2 it will also open parents when providing sub-menu indexes.\n         *\n         * @param {Boolean} open\n         */\n        toggle: function (open) {\n            var self = this,\n                length = arguments.length;\n\n            if (length <= 1) {\n                self.$el.find('ul').each(function () {\n                    var sub = $(this);\n                    self._toggle(sub, open);\n                });\n            } else {\n                var idx,\n                    list = {},\n                    args = Array.prototype.slice.call(arguments, 1);\n                length--;\n\n                for (var i = 0; i < length; i++) {\n                    idx = args[i];\n                    var sub = self.$el.find('ul[data-index=\"' + idx + '\"]').first();\n                    if (sub) {\n                        list[idx] = sub;\n                        if (open) {\n                            var parents = self._parents(sub, true);\n                            for (var pIdx in parents) {\n                                if (!list.hasOwnProperty(pIdx)) {\n                                    list[pIdx] = parents[pIdx];\n                                }\n                            }\n                        }\n                    }\n                }\n\n                for (idx in list) {\n                    self._toggle(list[idx], open);\n                }\n            }\n            self._save();\n        },\n        /**\n         * Removes instance from JQuery data cache and unbinds events.\n         */\n        destroy: function () {\n            $.removeData(this.$el);\n            this.$el.find(\"li:has(ul) > a\").unbind('click');\n        }\n    };\n\n    /**\n     * A JQuery plugin wrapper for navgoco. It prevents from multiple instances and also handles\n     * public methods calls. If we attempt to call a public method on an element that doesn't have\n     * a navgoco instance, one will be created for it with the default options.\n     *\n     * @param {Object|String} options\n     */\n    $.fn.navgoco = function (options) {\n        if (typeof options === 'string' && options.charAt(0) !== '_' && options !== 'init') {\n            var callback = true,\n                args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            options = $.extend({}, $.fn.navgoco.defaults, options || {});\n            if (!$.cookie) {\n                options.save = false;\n            }\n        }\n        return this.each(function (idx) {\n            var $this = $(this),\n                obj = $this.data('navgoco');\n\n            if (!obj) {\n                obj = new Plugin(this, callback ? $.fn.navgoco.defaults : options, idx);\n                $this.data('navgoco', obj);\n            }\n            if (callback) {\n                obj[options].apply(obj, args);\n            }\n        });\n    };\n    /**\n     * Global var holding all navgoco menus open states\n     *\n     * @type {Object}\n     */\n    var cookie = null;\n\n    /**\n     * Default navgoco options\n     *\n     * @type {Object}\n     */\n    $.fn.navgoco.defaults = {\n        caret: '<span class=\"caret\"></span>',\n        accordion: false,\n        openClass: 'open',\n        save: true,\n        cookie: {\n            name: 'navgoco',\n            expires: false,\n            path: '/'\n        },\n        slide: {\n            duration: 400,\n            easing: 'swing'\n        },\n        onClickBefore: $.noop,\n        onClickAfter: $.noop,\n        onToggleBefore: $.noop,\n        onToggleAfter: $.noop\n    };\n})(jQuery);"],"sourceRoot":"/source/"}